[project]
name = "automagik-hive"
version = "0.1.2"
description = "Automagik Multi-Agent Framework - Extensible Agent Creation System"
readme = "README.md"
license = "MIT"
requires-python = ">=3.12"
authors = [
    {name = "Automagik", email = "hive@namastex.ai"}
]
keywords = ["ai", "agents", "multi-agent", "framework", "agno"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

# Minimal dependencies - Agno provides most core functionality
dependencies = [
    # Core Framework (Agno bundles: httpx, pydantic, python-dotenv, rich, pyyaml, gitpython, typer)
    "agno==1.7.5",
    # Additional utilities not in Agno
    "aiofiles>=24.1.0",
    "jinja2>=3.1.6",
    "markdown>=3.8.2",
    "watchdog>=6.0.0",
    "psutil>=5.9.0",
    # Database stack
    "asyncpg>=0.29.0",
    "pgvector>=0.2.0",
    "alembic>=1.16.4",
    "psycopg[binary]>=3.1.0",
    "psycopg-pool>=3.1.0",
    "sqlalchemy>=2.0.0",
    # AI Providers (not in Agno)
    "anthropic>=0.31.0",
    "openai>=1.93.2",
    "cohere>=5.15.0",
    "google-generativeai>=0.8.5",
    "google-genai>=1.25.0",
    # Web Framework (not in Agno core)
    "fastapi>=0.116.0",
    "uvicorn>=0.35.0",
    "aiohttp>=3.12.14",
    "requests>=2.32.4",
    # MCP Protocol
    "mcp>=1.10.1",
    "loguru>=0.7.3",
    "pandas>=2.3.1",
    "langwatch>=0.2.9",
    "openinference-instrumentation-agno>=0.1.9",
    "greenlet>=3.2.3",
]

[project.optional-dependencies]
# Development dependencies (managed by UV)
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "coverage>=7.9.2",
    "langwatch-scenario>=0.7.8",
]

# Heavy analytics stack (excluded from production Docker)
analytics = [
    "pandas>=2.0.0",
    "scipy>=1.16.0", 
    "matplotlib>=3.10.3",
    "seaborn>=0.13.2",
    "plotly>=6.2.0",
    "numpy>=1.24.0",
    "sentence-transformers>=2.2.0",
]

[project.urls]
Homepage = "https://github.com/namastex/automagik-hive"
Repository = "https://github.com/namastex/automagik-hive"
Documentation = "https://docs.automagik.ai"
"Bug Tracker" = "https://github.com/namastex/automagik-hive/issues"

[project.scripts]
hive = "api.serve:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# ============================================================================
# UV Configuration
# ============================================================================
[tool.uv]
dev-dependencies = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0", 
    "coverage>=7.9.2",
    "ruff>=0.12.3",
    "mypy>=1.16.1",
]

# UV workspace configuration
[tool.uv.workspace]
members = ["."]

# ============================================================================
# Ruff Configuration (replaces black, isort, flake8, etc.)
# ============================================================================
[tool.ruff]
target-version = "py312"
line-length = 88
exclude = [
    ".venv",
    "__pycache__",
    ".git",
    "*.egg-info",
    "build",
    "dist",
]

[tool.ruff.lint]
# Enable all recommended rules
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings  
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "ISC",  # flake8-implicit-str-concat
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PL",   # pylint
    "TRY",  # tryceratops
    "RUF",  # ruff-specific rules
]

ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "E501", # Line too long (handled by formatter)
    "TRY003", # Avoid specifying long messages outside the exception class
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["D", "ARG"]
"api/**/*.py" = ["D"]
"ai/**/*.py" = ["D"]
"lib/**/*.py" = ["D"]

[tool.ruff.lint.isort]
known-first-party = ["automagik", "hive", "ai", "api", "lib"]
known-third-party = ["agno", "anthropic", "pydantic", "sqlalchemy", "fastapi", "uvicorn"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# ============================================================================
# MyPy Configuration (for type checking)
# ============================================================================
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["agno.*", "anthropic.*", "sentence_transformers.*", "pgvector.*"]
ignore_missing_imports = true

# ============================================================================
# Pytest Configuration
# ============================================================================ 
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--disable-warnings",
    "-ra",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

# ============================================================================
# Coverage Configuration
# ============================================================================
[tool.coverage.run]
source = ["ai", "api", "lib"]
omit = [
    "tests/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError", 
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# ============================================================================
# Hatchling Build Configuration
# ============================================================================
[tool.hatch.build.targets.wheel]
packages = ["ai", "api", "lib"]

[tool.hatch.build.targets.sdist]
include = [
    "/ai",
    "/api", 
    "/lib",
    "/tests",
    "/README.md",
    "/pyproject.toml",
]
