#!/usr/bin/env python3
"""
Exemplo pr√°tico de execu√ß√£o do workflow de an√°lise de dados de pesquisa
"""

import asyncio
import os
from pathlib import Path
from datetime import datetime

# Importar o workflow
from ai.workflows.survey_data_visualization_workflow.workflow import get_survey_data_visualization_workflow


async def run_survey_analysis(xlsx_file_path: str, output_dir: str = None):
    """
    Executa an√°lise completa de dados de pesquisa
    
    Args:
        xlsx_file_path: Caminho para o arquivo XLSX de pesquisa
        output_dir: Diret√≥rio para salvar os resultados (opcional)
    """
    
    # Verificar se o arquivo existe
    if not Path(xlsx_file_path).exists():
        raise FileNotFoundError(f"Arquivo n√£o encontrado: {xlsx_file_path}")
    
    # Criar diret√≥rio de output se necess√°rio
    if output_dir is None:
        output_dir = f"data/surveys/outputs/analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    print(f"üîÑ Iniciando an√°lise da pesquisa...")
    print(f"üìÅ Arquivo: {xlsx_file_path}")
    print(f"üìä Output: {output_dir}")
    
    # Criar inst√¢ncia do workflow
    workflow = get_survey_data_visualization_workflow(
        session_id=f"survey-analysis-{datetime.now().strftime('%Y%m%d%H%M%S')}"
    )
    
    # Preparar mensagem de entrada
    analysis_message = f"""
    Por favor, analise os dados de pesquisa do arquivo XLSX:
    
    Arquivo: {xlsx_file_path}
    
    Instru√ß√µes:
    1. Extraia todas as colunas que contenham 'pesquisa' no nome
    2. Classifique automaticamente os tipos de dados de cada coluna
    3. Gere visualiza√ß√µes profissionais apropriadas para cada tipo de dado
    4. Compile um dashboard interativo com insights executivos
    5. Salve os resultados no diret√≥rio: {output_dir}
    
    Estrutura esperada das colunas:
    - pesquisa300625_screen0 at√© pesquisa300625_screen9
    - Tipos de dados: categ√≥ricos, num√©ricos, temporais, textuais
    
    Gere relat√≥rio executivo com recomenda√ß√µes de neg√≥cio.
    """
    
    try:
        # Executar workflow com streaming para acompanhar progresso
        print("\nüìà Executando workflow...")
        
        async for response in workflow.run(
            message=analysis_message,
            stream=True,
            stream_intermediate_steps=True
        ):
            # Mostrar progresso de cada etapa
            if hasattr(response, 'step_name') and response.step_name:
                print(f"   ‚è≥ {response.step_name}: {response.content[:100]}...")
        
        # Resultado final
        final_result = await workflow.arun(message=analysis_message)
        
        print("\n‚úÖ An√°lise conclu√≠da com sucesso!")
        print(f"üìä Resultados salvos em: {output_dir}")
        print(f"üìÑ Logs completos dispon√≠veis no sistema")
        
        return final_result
        
    except Exception as e:
        print(f"\n‚ùå Erro durante a execu√ß√£o: {str(e)}")
        raise


async def main():
    """Exemplo de uso principal"""
    
    # Exemplo 1: An√°lise b√°sica
    xlsx_file = "data/surveys/raw/pesquisa_satisfacao_2024.xlsx"
    
    if Path(xlsx_file).exists():
        result = await run_survey_analysis(xlsx_file)
        print(f"\nüéØ Resultado: {result}")
    else:
        print(f"‚ö†Ô∏è  Arquivo de exemplo n√£o encontrado: {xlsx_file}")
        print("   Coloque sua planilha em data/surveys/raw/ e ajuste o caminho acima")


if __name__ == "__main__":
    # Executar an√°lise
    asyncio.run(main())